{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to My Documentation Repo! Official Mkdocs Websites For full documentation visit mkdocs.org . For Material Theme documentation visit mkdocs-material Prerequisites Before you can manually install Mkdocs, you need to have Python and PIP installed on your computer. The following methods assume you already have WSL installed and activated on your system. Installing Python You can check if you have Python already installed from the command line: $ python --version Python 2.7.2 $ pip --version pip 1.5.2 Installing pip If you're using a recent version of Python, the Python package manager, pip, is most likely installed by default. However, you may need to upgrade pip to the lasted version: pip install --upgrade pip If you need to install pip for the first time, download get-pip.py. Then run the following command to install it: python get-pip.py Installing Mkdocs Install the mkdocs package using pip: pip install mkdocs You should now have the mkdocs command installed on your system. Run mkdocs --version to check that everything worked okay. $ mkdocs --version mkdocs, version 0.15.3 Getting Started Getting started is super easy. mkdocs new my-project cd my-project Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Building Locally Modify the mkdocs.yml file to add pages. (Located inside the mkdocs/ ) Create new markdown pages (.md) inside the docs/ folder. When ready to generate new pages for deployment, run mkdocs build within mkdocs/ cd site/ and push your files to your Github docs repo: git push origin master Configuring repos Since you will most likely be uploading mkdocs into your /docs Github repo, note it is not necessary to clone your /docs repo locally. Instead, ensure you have properly set the remote url within your mkdocs >> /site folder. That way you can simply git push and/or pull your files seamlessly into your /docs remote repo. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-my-documentation-repo","text":"Official Mkdocs Websites For full documentation visit mkdocs.org . For Material Theme documentation visit mkdocs-material","title":"Welcome to My Documentation Repo!"},{"location":"#prerequisites","text":"Before you can manually install Mkdocs, you need to have Python and PIP installed on your computer. The following methods assume you already have WSL installed and activated on your system.","title":"Prerequisites"},{"location":"#installing-python","text":"You can check if you have Python already installed from the command line: $ python --version Python 2.7.2 $ pip --version pip 1.5.2","title":"Installing Python"},{"location":"#installing-pip","text":"If you're using a recent version of Python, the Python package manager, pip, is most likely installed by default. However, you may need to upgrade pip to the lasted version: pip install --upgrade pip If you need to install pip for the first time, download get-pip.py. Then run the following command to install it: python get-pip.py","title":"Installing pip"},{"location":"#installing-mkdocs","text":"Install the mkdocs package using pip: pip install mkdocs You should now have the mkdocs command installed on your system. Run mkdocs --version to check that everything worked okay. $ mkdocs --version mkdocs, version 0.15.3","title":"Installing Mkdocs"},{"location":"#getting-started","text":"Getting started is super easy. mkdocs new my-project cd my-project","title":"Getting Started"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#building-locally","text":"Modify the mkdocs.yml file to add pages. (Located inside the mkdocs/ ) Create new markdown pages (.md) inside the docs/ folder. When ready to generate new pages for deployment, run mkdocs build within mkdocs/ cd site/ and push your files to your Github docs repo: git push origin master Configuring repos Since you will most likely be uploading mkdocs into your /docs Github repo, note it is not necessary to clone your /docs repo locally. Instead, ensure you have properly set the remote url within your mkdocs >> /site folder. That way you can simply git push and/or pull your files seamlessly into your /docs remote repo.","title":"Building Locally"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"android/","text":"Android Linux on Dex","title":"Android"},{"location":"android/#android","text":"","title":"Android"},{"location":"android/#linux-on-dex","text":"","title":"Linux on Dex"},{"location":"blog/","text":"Blog Official Mediumish Websites Author Website \u2013 Mediumish - Jekyll Bootstrap Theme . Mediumish Github Repo \u2013 mediumish-theme-jekyll How to use \u201cMediumish\u201d theme Prerequisites Ensure you're running Linux or WSL on Windows 10 with Python, Ruby, and Jekyll installed. Download or git clone https://github.com/wowthemesnet/mediumish-theme-jekyll.git cd mediumish-theme-jekyll Run bundle and then jekyll serve --watch (Note: you may need to run bundle exec jekyll serve --watch ) Troubleshooting \u2013 Ruby/Jekyll requirement errors when serving After running the jekyll serve --watch command, you might encounter the following error: Traceback (most recent call last): 5: from /usr/local/bin/jekyll:23:in `<main>' 4: from /usr/local/bin/jekyll:23:in `load' 3: from /var/lib/gems/2.5.0/gems/jekyll-3.8.6/exe/jekyll:11:in `<top (required)>' 2: from /var/lib/gems/2.5.0/gems/jekyll-3.8.6/lib/jekyll/plugin_manager.rb:48:in `require_from_bundler' 1: from /usr/lib/ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in `require' /usr/lib/ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in `require': cannot load such file -- bundler (LoadError) To resolve this issue, run the gem update --system You might encounter a new issue after running the above command: Error: could not read file /mnt/c/Users/muyga/Desktop/mediumish-theme-jekyll/vendor/bundle/gems/ jekyll-3.8.5/lib/site_template/_posts/0000-00-00-welcome-to-jekyll.markdown.erb: Invalid date '<%= Time.now.strftime('%Y-%m-%d %H:%M:%S %z') %>': Document 'vendor/bundle/gems/jekyll-3.8.5/ lib/site_template/_posts/0000-00-00-welcome-to-jekyll.markdown.erb' does not have a valid date in the YAML front matter. ERROR: YOUR SITE COULD NOT BE BUILT: ------------------------------- ----- Invalid date '<%= Time.now.strftime('%Y-%m-%d %H:%M:%S %z') %>': Document 'vendor/bundle/ gems/jekyll-3.8.5/lib/site_template/_posts/0000-00-00-welcome-to-jekyll.markdown.erb' does not have a valid date in the YAML front matter. If this happens, modify your config.yml file and add vendor to the exclude: category in order to exclude the vendor/ folder from your theme folder. Now run bundle exec jekyll serve --watch to serve the theme properly.","title":"Blog"},{"location":"blog/#blog","text":"Official Mediumish Websites Author Website \u2013 Mediumish - Jekyll Bootstrap Theme . Mediumish Github Repo \u2013 mediumish-theme-jekyll","title":"Blog"},{"location":"blog/#how-to-use-mediumish-theme","text":"Prerequisites Ensure you're running Linux or WSL on Windows 10 with Python, Ruby, and Jekyll installed. Download or git clone https://github.com/wowthemesnet/mediumish-theme-jekyll.git cd mediumish-theme-jekyll Run bundle and then jekyll serve --watch (Note: you may need to run bundle exec jekyll serve --watch ) Troubleshooting \u2013 Ruby/Jekyll requirement errors when serving After running the jekyll serve --watch command, you might encounter the following error: Traceback (most recent call last): 5: from /usr/local/bin/jekyll:23:in `<main>' 4: from /usr/local/bin/jekyll:23:in `load' 3: from /var/lib/gems/2.5.0/gems/jekyll-3.8.6/exe/jekyll:11:in `<top (required)>' 2: from /var/lib/gems/2.5.0/gems/jekyll-3.8.6/lib/jekyll/plugin_manager.rb:48:in `require_from_bundler' 1: from /usr/lib/ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in `require' /usr/lib/ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in `require': cannot load such file -- bundler (LoadError) To resolve this issue, run the gem update --system You might encounter a new issue after running the above command: Error: could not read file /mnt/c/Users/muyga/Desktop/mediumish-theme-jekyll/vendor/bundle/gems/ jekyll-3.8.5/lib/site_template/_posts/0000-00-00-welcome-to-jekyll.markdown.erb: Invalid date '<%= Time.now.strftime('%Y-%m-%d %H:%M:%S %z') %>': Document 'vendor/bundle/gems/jekyll-3.8.5/ lib/site_template/_posts/0000-00-00-welcome-to-jekyll.markdown.erb' does not have a valid date in the YAML front matter. ERROR: YOUR SITE COULD NOT BE BUILT: ------------------------------- ----- Invalid date '<%= Time.now.strftime('%Y-%m-%d %H:%M:%S %z') %>': Document 'vendor/bundle/ gems/jekyll-3.8.5/lib/site_template/_posts/0000-00-00-welcome-to-jekyll.markdown.erb' does not have a valid date in the YAML front matter. If this happens, modify your config.yml file and add vendor to the exclude: category in order to exclude the vendor/ folder from your theme folder. Now run bundle exec jekyll serve --watch to serve the theme properly.","title":"How to use \u201cMediumish\u201d theme"},{"location":"frontend/","text":"Front-End Development A useful reference guide for templates, best style practices, and layout development. Headers Headers usually have a large hero image with a website logo, navigation bar, and hero text box. Preliminary Planning You should first create a rough design of how your header will look. There are various ways to accomplish this: pencil illustrations, wire framing, photoshop, etc. Every header is unique, but the common components included are are a logo, navigation menu, hero text, call-to-action button, and a background image. Decide which background image you will be using, otherwise select a background color (or gradient) if no image will be used. It's also important to define positioning for each item you include. Hero Background Dimensions See: Guide to Properly Size Your Hero Images and Optimize Them for Site Speed . 1600 x 1000px or sometimes 1920 x 1200px Coding Your Header index.html Begin with the semantic <header> ... </header> HTML tags. style.css Height \u2013 One of the first things you want to do is define a height for your header. This can be be a fixed height in px units, a percentage, min-height , or even the vh (viewport height) if you want it that large. Width \u2013 For the most part, the width is usually 100% for responsive-purposes. Even if the parent element of your header has a fixed width that is not the full page's width, your header will display at 100% of the container. Background Color \u2013 Before we add a background image, it's best practice to define a fallback color for the header in case the image does not load correctly. Example: background-color: rgb(73, 1, 147); Background Image \u2013 Ensure the image you will be using resides within your css/img/ or ../img/ folder. Using your header property, include background-image: url('../img/home-bg.jpg'); to your CSS. Background Image Linear Gradient \u2013 If you want add a transparent color overlay atop of your background image, you can accomplish that with the following: background-image: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url(img/hero.jpg); Putting It Altogether \u2013 header { background-image : linear-gradient ( rgba ( 0 , 0 , 0 , 0.7 ), rgba ( 0 , 0 , 0 , 0.7 )), url ( img/hero.jpg ); background-size : cover ; background-position : center ; height : 100 vh ; } Adding a Text Box Within your <header> tags, include a new div tag for your text box such as: <div class=\"hero-text-box\"></div> . Inside that text box div, you can include a heading and other text. <h1>Goodbye junk food. Hello super healthy meals.</h1> <a href=\"#\">I'm hungry</a> Centering Your Text Box In your style.css stylesheet, utilize your .hero-text-box class and add the following declarations: . hero-text-box { position : absolute ; width : 1140 px ; top : 50 % ; left : 50 % ; transform : translate ( -50 % , -50 % ); } position: absolute The only way we can vertically and horizontally position a box is by using the position: absolute declaration. See: CSS Reference: Positioning transform: translate The translate() CSS function repositions an element in the horizontal and/or vertical directions. See: CSS translate() transform function CSS Centering For alternative methods of centering content: See: How to center an element with CSS How To Center Anything With CSS \ud83d\udd25","title":"Front-End Development"},{"location":"frontend/#front-end-development","text":"A useful reference guide for templates, best style practices, and layout development.","title":"Front-End Development"},{"location":"frontend/#headers","text":"Headers usually have a large hero image with a website logo, navigation bar, and hero text box.","title":"Headers"},{"location":"frontend/#preliminary-planning","text":"You should first create a rough design of how your header will look. There are various ways to accomplish this: pencil illustrations, wire framing, photoshop, etc. Every header is unique, but the common components included are are a logo, navigation menu, hero text, call-to-action button, and a background image. Decide which background image you will be using, otherwise select a background color (or gradient) if no image will be used. It's also important to define positioning for each item you include. Hero Background Dimensions See: Guide to Properly Size Your Hero Images and Optimize Them for Site Speed . 1600 x 1000px or sometimes 1920 x 1200px","title":"Preliminary Planning"},{"location":"frontend/#coding-your-header","text":"index.html Begin with the semantic <header> ... </header> HTML tags. style.css Height \u2013 One of the first things you want to do is define a height for your header. This can be be a fixed height in px units, a percentage, min-height , or even the vh (viewport height) if you want it that large. Width \u2013 For the most part, the width is usually 100% for responsive-purposes. Even if the parent element of your header has a fixed width that is not the full page's width, your header will display at 100% of the container. Background Color \u2013 Before we add a background image, it's best practice to define a fallback color for the header in case the image does not load correctly. Example: background-color: rgb(73, 1, 147); Background Image \u2013 Ensure the image you will be using resides within your css/img/ or ../img/ folder. Using your header property, include background-image: url('../img/home-bg.jpg'); to your CSS. Background Image Linear Gradient \u2013 If you want add a transparent color overlay atop of your background image, you can accomplish that with the following: background-image: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url(img/hero.jpg); Putting It Altogether \u2013 header { background-image : linear-gradient ( rgba ( 0 , 0 , 0 , 0.7 ), rgba ( 0 , 0 , 0 , 0.7 )), url ( img/hero.jpg ); background-size : cover ; background-position : center ; height : 100 vh ; }","title":"Coding Your Header"},{"location":"frontend/#adding-a-text-box","text":"Within your <header> tags, include a new div tag for your text box such as: <div class=\"hero-text-box\"></div> . Inside that text box div, you can include a heading and other text. <h1>Goodbye junk food. Hello super healthy meals.</h1> <a href=\"#\">I'm hungry</a> Centering Your Text Box In your style.css stylesheet, utilize your .hero-text-box class and add the following declarations: . hero-text-box { position : absolute ; width : 1140 px ; top : 50 % ; left : 50 % ; transform : translate ( -50 % , -50 % ); } position: absolute The only way we can vertically and horizontally position a box is by using the position: absolute declaration. See: CSS Reference: Positioning transform: translate The translate() CSS function repositions an element in the horizontal and/or vertical directions. See: CSS translate() transform function CSS Centering For alternative methods of centering content: See: How to center an element with CSS How To Center Anything With CSS \ud83d\udd25","title":"Adding a Text Box"},{"location":"github/","text":"Git & Github Documentation on how to setup and configure Git & Github and frequently used commands. Git Terminal Commands Print Working Directory pwd Short Listing ls Long Listing ls -al Listing All Shows hidden files/folders ls -a Change Directory cd Home Directory (root) cd ~ or cd / Make Directory mkdir Make a File touch Display useful information re: repository git status Add commits to staging area git add Commit changes git commit Provide a list of all the latest commits git log Undo the changes made to a previous commit git revert Input git log in your terminal. Select the first 7 hash characters from the commit you want to revert. git revert -n 8969212 (the -n flag specifies that we do not want to commit the revert immediately.) git status should indicate that you are currently reverting a specific commit. (If you want to make the revert final, run the following command:) git commit -m \"Reverting the second commit\" If you want to revert back to the latest commit, use: git revert HEAD Undo the changes made to a previous commit (not saving commit history) git reset git reset 8969212 --hard (including the --hard modifier resets to a specific commit, but also cleans up working directory. Resets our files.) Display Branches git branch Create a Branch git branch personal_quotes git checkout -b branch-name \u2014 Shorthand method of creating and checkout branches simultaneously. git branch -d branch-name \u2014 Deletes a branch. Switch Branches git checkout git checkout personal_quotes Merges specific branches into your current branch (e.g. master) git merge git merge personal_quotes When having a merge conflict that requires you to manually reconcile, remove the HEAD , >>>>> , and ==== signs from the file and modify the code to your liking. Compares modifications made between files. git diff (+) in green indicates an addition, (-) in red indicates a subtraction or removal. git diff filename.txt \u2014 Enables you to see changes made to one specific file. Add a remote repository to your local repository git remote add origin github-repo-url git remote \u2014 Displays the names of any remotes available. Push local commits to a remote repo git push origin master git push -u origin master \u2014 Tracks all branches we push to remote url. git push is now a shorter command we can use. Push all branches up to our remote origin repo. git push --all origin Pull any changes available on a remote repo down to a local repo. git pull origin master Stash or 'save' changes we made that we are not ready to commit yet. git stash save Reintroduce or add the changes we temporarily stashed back into the code. git stash pop Merge, but shift the starting point for the branch. git rebase Squash multiple commits into one commit. git squash VIM If you forget to include the -m flag when committing your changes, a text editor called VIM will appear. While within VIM, press 'i' on your keyboard to allow typing, followed by the commit message. When finished, press 'esq' key, followed by :wq and enter to exit. Terminology HEAD \u2014 The latest commit on a current branch. HEAD~1 \u2014 The commit before the latest commit. Troubleshooting Change the URI (URL) for a remote Git repository git remote -v # View existing remotes # origin https://github.com/user/repo.git (fetch) # origin https://github.com/user/repo.git (push) git remote set-url origin git://new.url.here # Change the 'origin' remote's URL git remote -v # Verify new remote URL # origin https://github.com/user/repo2.git (fetch) # origin https://github.com/user/repo2.git (push) git push origin master Forcing a Git Push git push -f origin <branch> Skip passphrase prompt for git ssh eval `ssh-agent -s` ssh-add ~/.ssh/*_rsa It will ask for pass phrase in the second command, and that's it. Each additional action you will need to do (which once required pass phrase) won't ask you for the pass phrase. Github How to setup Github Pages User or organization site Create a repository Head over to GitHub and create a new repository named username.github.io , where username is your username (or organization name) on GitHub. Clone the repository Go to the folder where you want to store your project, and clone the new repository: git clone https://github.com/username/username.github.io Hello World Enter the project folder and add an index.html file: cd username.github.io echo \"Hello World\" > index.html Push it Add, commit, and push your changes: git add --all git commit -m \"Initial commit\" git push -u origin master \u2026and you're done! Fire up a browser and go to https://username.github.io . Project site Create an index file Head over to GitHub.com and create a new repository, or go to an existing one. Click on the Create new file button. Hello World Name the file index.html and type some HTML content into the editor. Commit the file Scroll to the bottom of the page, write a commit message, and commit the new file. Repository Settings Click on the Settings tab and scroll down to the GitHub Pages section. Then select the master branch source and click on the Save button. \u2026and you're done! Fire up a browser and go to http://username.github.io/repository . Adding a domain name to Github Pages Purchase a domain name from NameCheap Please see NameCheap's How do I link my domain to GitHub Pages Adding a new domain-name-accessible repo directory (e.g. yourwebsite.com/docs)","title":"Git & Github"},{"location":"github/#git-github","text":"Documentation on how to setup and configure Git & Github and frequently used commands.","title":"Git &amp; Github"},{"location":"github/#terminal-commands","text":"","title":"Terminal Commands"},{"location":"github/#print-working-directory","text":"pwd","title":"Print Working Directory"},{"location":"github/#short-listing","text":"ls","title":"Short Listing"},{"location":"github/#long-listing","text":"ls -al","title":"Long Listing"},{"location":"github/#listing-all","text":"Shows hidden files/folders ls -a","title":"Listing All"},{"location":"github/#change-directory","text":"cd","title":"Change Directory"},{"location":"github/#home-directory-root","text":"cd ~ or cd /","title":"Home Directory (root)"},{"location":"github/#make-directory","text":"mkdir","title":"Make Directory"},{"location":"github/#make-a-file","text":"touch","title":"Make a File"},{"location":"github/#display-useful-information-re-repository","text":"git status","title":"Display useful information re: repository"},{"location":"github/#add-commits-to-staging-area","text":"git add","title":"Add commits to staging area"},{"location":"github/#commit-changes","text":"git commit","title":"Commit changes"},{"location":"github/#provide-a-list-of-all-the-latest-commits","text":"git log","title":"Provide a list of all the latest commits"},{"location":"github/#undo-the-changes-made-to-a-previous-commit","text":"git revert Input git log in your terminal. Select the first 7 hash characters from the commit you want to revert. git revert -n 8969212 (the -n flag specifies that we do not want to commit the revert immediately.) git status should indicate that you are currently reverting a specific commit. (If you want to make the revert final, run the following command:) git commit -m \"Reverting the second commit\" If you want to revert back to the latest commit, use: git revert HEAD","title":"Undo the changes made to a previous commit"},{"location":"github/#undo-the-changes-made-to-a-previous-commit-not-saving-commit-history","text":"git reset git reset 8969212 --hard (including the --hard modifier resets to a specific commit, but also cleans up working directory. Resets our files.)","title":"Undo the changes made to a previous commit (not saving commit history)"},{"location":"github/#display-branches","text":"git branch","title":"Display Branches"},{"location":"github/#create-a-branch","text":"git branch personal_quotes git checkout -b branch-name \u2014 Shorthand method of creating and checkout branches simultaneously. git branch -d branch-name \u2014 Deletes a branch.","title":"Create a Branch"},{"location":"github/#switch-branches","text":"git checkout git checkout personal_quotes","title":"Switch Branches"},{"location":"github/#merges-specific-branches-into-your-current-branch-eg-master","text":"git merge git merge personal_quotes When having a merge conflict that requires you to manually reconcile, remove the HEAD , >>>>> , and ==== signs from the file and modify the code to your liking.","title":"Merges specific branches into your current branch (e.g. master)"},{"location":"github/#compares-modifications-made-between-files","text":"git diff (+) in green indicates an addition, (-) in red indicates a subtraction or removal. git diff filename.txt \u2014 Enables you to see changes made to one specific file.","title":"Compares modifications made between files."},{"location":"github/#add-a-remote-repository-to-your-local-repository","text":"git remote add origin github-repo-url git remote \u2014 Displays the names of any remotes available.","title":"Add a remote repository to your local repository"},{"location":"github/#push-local-commits-to-a-remote-repo","text":"git push origin master git push -u origin master \u2014 Tracks all branches we push to remote url. git push is now a shorter command we can use.","title":"Push local commits to a remote repo"},{"location":"github/#push-all-branches-up-to-our-remote-origin-repo","text":"git push --all origin","title":"Push all branches up to our remote origin repo."},{"location":"github/#pull-any-changes-available-on-a-remote-repo-down-to-a-local-repo","text":"git pull origin master","title":"Pull any changes available on a remote repo down to a local repo."},{"location":"github/#stash-or-save-changes-we-made-that-we-are-not-ready-to-commit-yet","text":"git stash save","title":"Stash or 'save' changes we made that we are not ready to commit yet."},{"location":"github/#reintroduce-or-add-the-changes-we-temporarily-stashed-back-into-the-code","text":"git stash pop","title":"Reintroduce or add the changes we temporarily stashed back into the code."},{"location":"github/#merge-but-shift-the-starting-point-for-the-branch","text":"git rebase","title":"Merge, but shift the starting point for the branch."},{"location":"github/#squash-multiple-commits-into-one-commit","text":"git squash","title":"Squash multiple commits into one commit."},{"location":"github/#vim","text":"If you forget to include the -m flag when committing your changes, a text editor called VIM will appear. While within VIM, press 'i' on your keyboard to allow typing, followed by the commit message. When finished, press 'esq' key, followed by :wq and enter to exit.","title":"VIM"},{"location":"github/#terminology","text":"HEAD \u2014 The latest commit on a current branch. HEAD~1 \u2014 The commit before the latest commit.","title":"Terminology"},{"location":"github/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"github/#change-the-uri-url-for-a-remote-git-repository","text":"git remote -v # View existing remotes # origin https://github.com/user/repo.git (fetch) # origin https://github.com/user/repo.git (push) git remote set-url origin git://new.url.here # Change the 'origin' remote's URL git remote -v # Verify new remote URL # origin https://github.com/user/repo2.git (fetch) # origin https://github.com/user/repo2.git (push) git push origin master","title":"Change the URI (URL) for a remote Git repository"},{"location":"github/#forcing-a-git-push","text":"git push -f origin <branch>","title":"Forcing a Git Push"},{"location":"github/#skip-passphrase-prompt-for-git-ssh","text":"eval `ssh-agent -s` ssh-add ~/.ssh/*_rsa It will ask for pass phrase in the second command, and that's it. Each additional action you will need to do (which once required pass phrase) won't ask you for the pass phrase.","title":"Skip passphrase prompt for git ssh"},{"location":"github/#how-to-setup-github-pages","text":"","title":"How to setup Github Pages"},{"location":"github/#user-or-organization-site","text":"","title":"User or organization site"},{"location":"github/#create-a-repository","text":"Head over to GitHub and create a new repository named username.github.io , where username is your username (or organization name) on GitHub.","title":"Create a repository"},{"location":"github/#clone-the-repository","text":"Go to the folder where you want to store your project, and clone the new repository: git clone https://github.com/username/username.github.io","title":"Clone the repository"},{"location":"github/#hello-world","text":"Enter the project folder and add an index.html file: cd username.github.io echo \"Hello World\" > index.html","title":"Hello World"},{"location":"github/#push-it","text":"Add, commit, and push your changes: git add --all git commit -m \"Initial commit\" git push -u origin master","title":"Push it"},{"location":"github/#and-youre-done","text":"Fire up a browser and go to https://username.github.io .","title":"\u2026and you're done!"},{"location":"github/#project-site","text":"","title":"Project site"},{"location":"github/#create-an-index-file","text":"Head over to GitHub.com and create a new repository, or go to an existing one. Click on the Create new file button.","title":"Create an index file"},{"location":"github/#hello-world_1","text":"Name the file index.html and type some HTML content into the editor.","title":"Hello World"},{"location":"github/#commit-the-file","text":"Scroll to the bottom of the page, write a commit message, and commit the new file.","title":"Commit the file"},{"location":"github/#repository-settings","text":"Click on the Settings tab and scroll down to the GitHub Pages section. Then select the master branch source and click on the Save button.","title":"Repository Settings"},{"location":"github/#and-youre-done_1","text":"Fire up a browser and go to http://username.github.io/repository .","title":"\u2026and you're done!"},{"location":"github/#adding-a-domain-name-to-github-pages","text":"Purchase a domain name from NameCheap Please see NameCheap's How do I link my domain to GitHub Pages","title":"Adding a domain name to Github Pages"},{"location":"github/#adding-a-new-domain-name-accessible-repo-directory","text":"(e.g. yourwebsite.com/docs)","title":"Adding a new domain-name-accessible repo directory"},{"location":"repos/","text":"","title":"Repositories"},{"location":"samsung-ativ8/","text":"","title":"Samsung ATIV 8"},{"location":"terminal/","text":"Terminal How to Install Linux Bash Shell on Windows 10 (WSL) Enable \u201cWindows Subsystem for Linux\u201d feature The first thing you need to do is to enable Windows Subsyetm for Linux feature from PowerShell. Go to the Start menu and search for PowerShell. Run it as administrator: Once you have the PowerShell running, use the command below to enable Bash in Windows 10. Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux You\u2019ll be asked to confirm your choice. Type Y or press enter: Now you should be asked to reboot. Even if you are not asked to, you must restart your system. Download a Linux system from the Windows store Once your system has rebooted, go to the Windows Store and search for \u201cLinux.\u201d You\u2019ll see the option to install Ubuntu or SUSE. Install Ubuntu for Bash on Windows. Once you choose the distribution of your choice, you\u2019ll see the option to install it. Do note that it will download files of around 1Gb in size. So you should have a good internet connection here. Run Linux inside Windows 10 You are almost there. Once you have installed Linux, it\u2019s time to see how to access Bash in Windows 10. Just search for the Linux distribution you installed in the previous step. In my case it was Ubuntu. You\u2019ll see that it runs like a normal Windows application. It will take some time installing and then you\u2019ll have to set up the username and password. Updating Default Software You will need to run a quick couple commands in order to run updates software updater. The Ubuntu OS is shipped with a ton of built-in software like Git and other APT libraries, but those libraries may have had more recent updates come out since the OS was shipped. Updating this now is quick and will help you stay current and protected. Type sudo apt-get update . Once that is complete, type sudo apt-get upgrade . Press y when prompted. Once that is done, type sudo apt autoremove . This will remove any packages that are no longer needed. Terminal & Linux Packages Python There is a very good chance your Linux distribution has Python installed already, but it probably won\u2019t be the latest version, and it may be Python 2 instead of Python 3. To find out what version(s) you have, open a terminal window and try the following commands: python --version python2 --version python3 --version One or more of these commands should respond with a version, as below: $ python3 --version Python 3.6.5 If the version shown is Python 2.x.x or a version of Python 3 that is not the latest (3.6.5 as of this writing), then you will want to install the latest version. The procedure for doing this will depend on the Linux distribution you are running. Depending on the version of the Ubuntu distribution you run, the Python install instructions vary. You can determine your local Ubuntu version by running the following command: $ lsb_release -a No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 16.04.4 LTS Release: 16.04 Codename: xenial Depending on the version number you see under Release in the console output, follow the instructions below: Ubuntu 17.10, Ubuntu 18.04 (and above) come with Python 3.6 by default. You should be able to invoke it with the command python3 . Ubuntu 16.10 and 17.04 do not come with Python 3.6 by default, but it is in the Universe repository. You should be able to install it with the following commands: $ sudo apt-get update $ sudo apt-get install python3.6 You can then invoke it with the command python3.6 . Ruby The easiest way to install Ruby on Ubuntu is with a package manager. And for Ubuntu, that means \u201capt.\u201d You need to be an administrator\u2014or as it\u2019s called in the Unix world, a \u201csuperuser\u201d\u2014 to install packages. The way to run a command as the superuser is by putting the command \u201csudo\u201d (\u201cSUperuser DO\u201d) before it. Before we tackle installing Ruby though, let\u2019s make sure our new Ubuntu install is up to date. Run the following in your Bash terminal: sudo apt update && sudo apt dist-upgrade && sudo apt autoremove && sudo apt clean This will fetch a bunch of packages and then ask you to make sure you want to install them. You can just hit enter to say yes. Then comes more waiting! It\u2019s likely that you will have dozens of updates to install. Once that\u2019s done, you may get another question asking you if you want to remove some packages. Go ahead and hit \u201cEnter\u201d to say yes. Once you have your prompt back, you\u2019re ready to install Ruby! Do that with this simple command: sudo apt install ruby-full This does some dependency-checking and shows you what you need to install to get Ruby working: As always, hit \u201cEnter\u201d to accept, and away we go. There sure is a lot of waiting involved in installing software, isn\u2019t there? But once apt has done its magic, we\u2019ll have a working Ruby 2.5.1 install in our Linux Subsystem. As with RubyInstaller, you can verify the Ruby install by running \u201cruby -v\u201d: And you can check the RubyGems installed with \u201cgem list\u201d: Let\u2019s go a bit further with our WSL Ruby install and see what it takes to get Ruby on Rails set up. This Ubuntu install doesn\u2019t yet have the ability to compile gems, and Rails will need that. In particular, Rails wants to use the Nokogiri gem for parsing HTML, and that requires compiling its native extensions. The Nokogiri installation page gives us a list of apt packages to install to prepare for Nokogiri: \u201cbuild-essential, patch, ruby-dev, zlib1g-dev, and liblzma-dev.\u201d However, we\u2019re also going to have the same problem with needing SQLite to use the default Rails app generator. Luckily, apt has an SQLite library that fits the bill: libsqlite3-dev. Finally, Rails uses Node.js to do its JavaScript and asset packaging, so we want apt to install that as well. Let\u2019s add all that to the apt command Nokogiri gave us and run it: sudo apt install build-essential patch ruby-dev zlib1g-dev liblzma-dev libsqlite3-dev nodejs After that long list of packages is installed, you can run \u201cgem install rails.\u201d Windows Defender will probably make sure you\u2019re okay with Ruby making network calls: Go ahead and allow it and watch the gems fly by. Jekyll First let\u2019s make sure all our packages / repositories are up to date. Open a new Command Prompt instance, and type the following: bash Your Command Prompt instance should now be a Bash instance. Now we must update our repo lists and packages. sudo apt-get update -y && sudo apt-get upgrade -y Now we can install Ruby. To do this we will use a repository from BrightBox, which hosts optimized versions of Ruby for Ubuntu. sudo apt-add-repository ppa:brightbox/ruby-ng sudo apt-get update sudo apt-get install ruby2.5 ruby2.5-dev build-essential dh-autoreconf Next let\u2019s update our Ruby gems: sudo gem update Now all that is left to do is install Jekyll. sudo gem install jekyll bundler Check if Jekyll installed properly by running: jekyll -v Configure the bundler/gem path so bundle doesn\u2019t prompt for sudo bundle config path vendor/bundle","title":"Terminal"},{"location":"terminal/#terminal","text":"","title":"Terminal"},{"location":"terminal/#how-to-install-linux-bash-shell-on-windows-10-wsl","text":"","title":"How to Install Linux Bash Shell on Windows 10 (WSL)"},{"location":"terminal/#enable-windows-subsystem-for-linux-feature","text":"The first thing you need to do is to enable Windows Subsyetm for Linux feature from PowerShell. Go to the Start menu and search for PowerShell. Run it as administrator: Once you have the PowerShell running, use the command below to enable Bash in Windows 10. Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux You\u2019ll be asked to confirm your choice. Type Y or press enter: Now you should be asked to reboot. Even if you are not asked to, you must restart your system.","title":"Enable \u201cWindows Subsystem for Linux\u201d feature"},{"location":"terminal/#download-a-linux-system-from-the-windows-store","text":"Once your system has rebooted, go to the Windows Store and search for \u201cLinux.\u201d You\u2019ll see the option to install Ubuntu or SUSE. Install Ubuntu for Bash on Windows. Once you choose the distribution of your choice, you\u2019ll see the option to install it. Do note that it will download files of around 1Gb in size. So you should have a good internet connection here.","title":"Download a Linux system from the Windows store"},{"location":"terminal/#run-linux-inside-windows-10","text":"You are almost there. Once you have installed Linux, it\u2019s time to see how to access Bash in Windows 10. Just search for the Linux distribution you installed in the previous step. In my case it was Ubuntu. You\u2019ll see that it runs like a normal Windows application. It will take some time installing and then you\u2019ll have to set up the username and password.","title":"Run Linux inside Windows 10"},{"location":"terminal/#updating-default-software","text":"You will need to run a quick couple commands in order to run updates software updater. The Ubuntu OS is shipped with a ton of built-in software like Git and other APT libraries, but those libraries may have had more recent updates come out since the OS was shipped. Updating this now is quick and will help you stay current and protected. Type sudo apt-get update . Once that is complete, type sudo apt-get upgrade . Press y when prompted. Once that is done, type sudo apt autoremove . This will remove any packages that are no longer needed.","title":"Updating Default Software"},{"location":"terminal/#terminal-linux-packages","text":"","title":"Terminal &amp; Linux Packages"},{"location":"terminal/#python","text":"There is a very good chance your Linux distribution has Python installed already, but it probably won\u2019t be the latest version, and it may be Python 2 instead of Python 3. To find out what version(s) you have, open a terminal window and try the following commands: python --version python2 --version python3 --version One or more of these commands should respond with a version, as below: $ python3 --version Python 3.6.5 If the version shown is Python 2.x.x or a version of Python 3 that is not the latest (3.6.5 as of this writing), then you will want to install the latest version. The procedure for doing this will depend on the Linux distribution you are running. Depending on the version of the Ubuntu distribution you run, the Python install instructions vary. You can determine your local Ubuntu version by running the following command: $ lsb_release -a No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 16.04.4 LTS Release: 16.04 Codename: xenial Depending on the version number you see under Release in the console output, follow the instructions below: Ubuntu 17.10, Ubuntu 18.04 (and above) come with Python 3.6 by default. You should be able to invoke it with the command python3 . Ubuntu 16.10 and 17.04 do not come with Python 3.6 by default, but it is in the Universe repository. You should be able to install it with the following commands: $ sudo apt-get update $ sudo apt-get install python3.6 You can then invoke it with the command python3.6 .","title":"Python"},{"location":"terminal/#ruby","text":"The easiest way to install Ruby on Ubuntu is with a package manager. And for Ubuntu, that means \u201capt.\u201d You need to be an administrator\u2014or as it\u2019s called in the Unix world, a \u201csuperuser\u201d\u2014 to install packages. The way to run a command as the superuser is by putting the command \u201csudo\u201d (\u201cSUperuser DO\u201d) before it. Before we tackle installing Ruby though, let\u2019s make sure our new Ubuntu install is up to date. Run the following in your Bash terminal: sudo apt update && sudo apt dist-upgrade && sudo apt autoremove && sudo apt clean This will fetch a bunch of packages and then ask you to make sure you want to install them. You can just hit enter to say yes. Then comes more waiting! It\u2019s likely that you will have dozens of updates to install. Once that\u2019s done, you may get another question asking you if you want to remove some packages. Go ahead and hit \u201cEnter\u201d to say yes. Once you have your prompt back, you\u2019re ready to install Ruby! Do that with this simple command: sudo apt install ruby-full This does some dependency-checking and shows you what you need to install to get Ruby working: As always, hit \u201cEnter\u201d to accept, and away we go. There sure is a lot of waiting involved in installing software, isn\u2019t there? But once apt has done its magic, we\u2019ll have a working Ruby 2.5.1 install in our Linux Subsystem. As with RubyInstaller, you can verify the Ruby install by running \u201cruby -v\u201d: And you can check the RubyGems installed with \u201cgem list\u201d: Let\u2019s go a bit further with our WSL Ruby install and see what it takes to get Ruby on Rails set up. This Ubuntu install doesn\u2019t yet have the ability to compile gems, and Rails will need that. In particular, Rails wants to use the Nokogiri gem for parsing HTML, and that requires compiling its native extensions. The Nokogiri installation page gives us a list of apt packages to install to prepare for Nokogiri: \u201cbuild-essential, patch, ruby-dev, zlib1g-dev, and liblzma-dev.\u201d However, we\u2019re also going to have the same problem with needing SQLite to use the default Rails app generator. Luckily, apt has an SQLite library that fits the bill: libsqlite3-dev. Finally, Rails uses Node.js to do its JavaScript and asset packaging, so we want apt to install that as well. Let\u2019s add all that to the apt command Nokogiri gave us and run it: sudo apt install build-essential patch ruby-dev zlib1g-dev liblzma-dev libsqlite3-dev nodejs After that long list of packages is installed, you can run \u201cgem install rails.\u201d Windows Defender will probably make sure you\u2019re okay with Ruby making network calls: Go ahead and allow it and watch the gems fly by.","title":"Ruby"},{"location":"terminal/#jekyll","text":"First let\u2019s make sure all our packages / repositories are up to date. Open a new Command Prompt instance, and type the following: bash Your Command Prompt instance should now be a Bash instance. Now we must update our repo lists and packages. sudo apt-get update -y && sudo apt-get upgrade -y Now we can install Ruby. To do this we will use a repository from BrightBox, which hosts optimized versions of Ruby for Ubuntu. sudo apt-add-repository ppa:brightbox/ruby-ng sudo apt-get update sudo apt-get install ruby2.5 ruby2.5-dev build-essential dh-autoreconf Next let\u2019s update our Ruby gems: sudo gem update Now all that is left to do is install Jekyll. sudo gem install jekyll bundler Check if Jekyll installed properly by running: jekyll -v Configure the bundler/gem path so bundle doesn\u2019t prompt for sudo bundle config path vendor/bundle","title":"Jekyll"},{"location":"windows10/","text":"","title":"Windows 10"}]}